datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  plan      String
  theme     String?
  createdAt DateTime @default(now())

  profiles  Profile[]
  services  Service[]
  staff     Staff[]
  bookings  Booking[]
  timeOffs  TimeOff[]
  schedules Schedule[]
  bans      CustomerBan[]
  waitings  WaitingList[]
  staffServices StaffService[]
  mediaFiles MediaFile[]
  notificationTemplates NotificationTemplate[]
  notificationLogs NotificationLog[]
  recurringBookings RecurringBooking[]
  groupBookings GroupBooking[]
  earlierAppointmentRequests EarlierAppointmentRequest[]
}

model Profile {
  id           String   @id @default(cuid())
  tenantId     String
  email        String
  role         String   // owner|admin|staff|customer
  fullName     String?
  phone        String?
  createdAt    DateTime @default(now())
  totalRevenue Int      @default(0)
  status       String   @default("neu") // neu|bronze|silber|gold|diamant

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
}

model Service {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  durationMin Int
  priceCents  Int
  category    String?
  active      Boolean  @default(true)

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  serviceLinks StaffService[]
  waitings    WaitingList[]
  recurringBookings RecurringBooking[]
  groupBookings GroupBooking[]

  @@unique([tenantId, name])
}

model Staff {
  id           String   @id @default(cuid())
  tenantId     String
  name         String
  active       Boolean  @default(true)
  imageUrl     String?

  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  schedules    Schedule[]
  timeOffs     TimeOff[]
  serviceLinks StaffService[]
  recurringBookings RecurringBooking[]
  groupBookings GroupBooking[]
}

model StaffService {
  staffId   String
  serviceId String
  tenantId  String

  staff     Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([staffId, serviceId])
  @@index([tenantId])
}

model Schedule {
  id        String  @id @default(cuid())
  tenantId  String
  staffId   String
  weekday   Int     // 0=Mon ... 6=Sun
  startMin  Int
  endMin    Int

  staff     Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([staffId, weekday, startMin, endMin])
}

model TimeOff {
  id        String   @id @default(cuid())
  tenantId  String
  staffId   String
  dateFrom  DateTime
  dateTo    DateTime
  reason    String?

  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String   @id @default(cuid())
  tenantId      String
  serviceId     String
  staffId       String
  customerEmail String
  startAt       DateTime
  endAt         DateTime
  status        String   // CONFIRMED|CANCELLED
  createdBy     String?
  cancelledBy   String?

  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  service  Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff    Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([tenantId, staffId, startAt])
}

model CustomerBan {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  reason    String?
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
}

model WaitingList {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  email         String
  phone         String?
  serviceId     String
  preferredDate DateTime
  preferredTime String?
  flexible      Boolean  @default(false)
  priority      String   @default("medium")
  createdAt     DateTime @default(now())

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([tenantId, serviceId, preferredDate])
}

// Media Management
model MediaFile {
  id          String   @id @default(cuid())
  tenantId    String
  fileName    String
  originalName String
  mimeType    String
  fileSize    Int
  filePath    String
  category    String   // service|staff|gallery|product
  entityId    String?  // ID of related service/staff/etc
  altText     String?
  isPublic    Boolean  @default(true)
  uploadedBy  String?
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, category, entityId])
}

// Notification System
model NotificationTemplate {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  type        String   // email|sms|push
  event       String   // booking_confirmed|booking_reminder|booking_cancelled|waitlist_available
  subject     String?
  bodyText    String
  bodyHtml    String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, event, type])
}

model NotificationLog {
  id          String   @id @default(cuid())
  tenantId    String
  recipient   String   // email or phone
  type        String   // email|sms|push
  event       String
  subject     String?
  body        String
  status      String   // pending|sent|failed|delivered
  sentAt      DateTime?
  deliveredAt DateTime?
  errorMsg    String?
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, recipient, event])
}

// Recurring Bookings
model RecurringBooking {
  id            String   @id @default(cuid())
  tenantId      String
  serviceId     String
  staffId       String
  customerEmail String
  startDate     DateTime
  endDate       DateTime?
  frequency     String   // weekly|biweekly|monthly
  dayOfWeek     Int?     // 1=Monday, 7=Sunday
  timeSlot      String   // e.g., "14:30"
  maxOccurrences Int?
  status        String   @default("active") // active|paused|completed|cancelled
  createdBy     String?
  createdAt     DateTime @default(now())

  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  service       Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff         Staff          @relation(fields: [staffId], references: [id], onDelete: Cascade)
  instances     RecurringInstance[]

  @@index([tenantId, customerEmail, status])
}

model RecurringInstance {
  id                String   @id @default(cuid())
  recurringBookingId String
  scheduledDate     DateTime
  actualBookingId   String?  // Link to actual Booking if created
  status            String   @default("scheduled") // scheduled|booked|skipped|cancelled
  createdAt         DateTime @default(now())

  recurringBooking  RecurringBooking @relation(fields: [recurringBookingId], references: [id], onDelete: Cascade)

  @@index([recurringBookingId, scheduledDate])
}

// Group Bookings
model GroupBooking {
  id            String   @id @default(cuid())
  tenantId      String
  serviceId     String
  staffId       String
  primaryEmail  String   // Main contact person
  groupName     String?
  startAt       DateTime
  endAt         DateTime
  maxParticipants Int
  currentParticipants Int @default(0)
  pricePerPerson Int
  status        String   @default("open") // open|confirmed|cancelled|completed
  specialRequests String?
  createdBy     String?
  createdAt     DateTime @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  service       Service             @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff         Staff               @relation(fields: [staffId], references: [id], onDelete: Cascade)
  participants  GroupBookingParticipant[]

  @@index([tenantId, startAt, status])
}

model GroupBookingParticipant {
  id            String   @id @default(cuid())
  groupBookingId String
  name          String
  email         String
  phone         String?
  status        String   @default("pending") // pending|confirmed|cancelled
  joinedAt      DateTime @default(now())

  groupBooking  GroupBooking @relation(fields: [groupBookingId], references: [id], onDelete: Cascade)

  @@unique([groupBookingId, email])
}

// Earlier Appointment Requests
model EarlierAppointmentRequest {
  id            String   @id @default(cuid())
  tenantId      String
  customerEmail String
  currentBookingId String
  desiredDate   DateTime?
  flexibleTiming Boolean @default(true)
  priority      String   @default("normal") // normal|urgent
  status        String   @default("active") // active|fulfilled|expired|cancelled
  notificationSent Boolean @default(false)
  createdAt     DateTime @default(now())
  expiresAt     DateTime?

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status, desiredDate])
}
